name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]


# Permissions for the entire workflow
permissions:
  contents: write  # Required for: checkout, creating git tags
  pages: write     # Required for: GitHub Pages deployment
  id-token: write  # Required for: OIDC authentication (Pages + npm provenance)

# Allow one concurrent deployment
concurrency:
  group: "ci-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [24.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v6
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --no-frozen-lockfile

    - name: Run tests
      run: pnpm run test

    - name: Test coverage
      run: pnpm run test:coverage

    - name: Upload results to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        verbose: true # optional (default = false)
        name: codecov-coverage # optional (default = codecov-coverage)
        # slug: pshaddel/mcp-template

  lint-and-format:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v6
      with:
        node-version: '24.x'

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest

    - name: Install dependencies
      run: pnpm install --no-frozen-lockfile

    - name: Run Biome check (lint + format)
      run: pnpm run format:check

  type-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v6
      with:
        node-version: '24.x'

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest

    - name: Install dependencies
      run: pnpm install --no-frozen-lockfile

    - name: Run TypeScript type check
      run: pnpm run type-check

  # Pages deployment (only on main branch)
  build-pages:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [test, lint-and-format, type-check]
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3' # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          cache-version: 0 # Increment this number if you need to re-download cached gems
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
      - name: Upload artifact
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v4

  deploy-pages:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build-pages
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Package publishing (only on main branch)
  check-version:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [test, lint-and-format, type-check]
    outputs:
      version-changed: ${{ steps.version-check.outputs.changed }}
      version: ${{ steps.version-check.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Check if version changed
        id: version-check
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Check if this is the first commit or get previous version
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            git checkout HEAD~1 -- package.json || echo "No previous package.json found"
            if [ -f package.json ]; then
              PREVIOUS_VERSION=$(node -p "require('./package.json').version")
              git checkout HEAD -- package.json
              echo "Previous version: $PREVIOUS_VERSION"

              if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
                echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
                echo "changed=true" >> $GITHUB_OUTPUT
                echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
              else
                echo "Version unchanged"
                echo "changed=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "No previous package.json found, treating as new version"
              echo "changed=true" >> $GITHUB_OUTPUT
              echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            fi
          else
            echo "First commit, treating as new version"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          fi

  publish:
    needs: [check-version]
    if: needs.check-version.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v6
        with:
          node-version: '24'
          registry-url: 'https://registry.npmjs.org'
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
      - name: Install dependencies
        run: pnpm install
      - name: Run tests
        run: pnpm test
      - name: Build package
        run: pnpm run build
      - name: Publish to npm
        run: pnpm publish --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Create Release Tag
        run: |
          VERSION=${{ needs.check-version.outputs.version }}
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag "v$VERSION"
          git push origin "v$VERSION"